"""Задание №2
В Урок No10. Задание No1 вы создавали словарь с информацией о питомце. 
Теперь нам нужна "настоящая" база данных для ветеринарной клиники.
Подробный требуемый функционал будет ниже. Пока что справка:
Создайте функцию create
Создайте функцию read
Создайте функцию update
Создайте функцию delete
Используйте словарь pets, который будет предоставлен ниже, либо создайте свой аналогичный
Функция create:
Данная функция будет создавать новую запись с информацией о питомце и добавлять эту информацию в наш словарь pets
Функция read
Данная функция будет отображать информацию о запрашиваемом питомце в виде: Это желторотый питон по кличке "Каа". 
Возраст питомца: 19 лет. Имя владельца: Саша Функция update
Данная функция будет обновлять информацию об указанном питомце
Функция delete
Данная функция будет удалять запись о существующем питомце
Структруа результирующего словаря pets будет как и в Урок No10. Задание No1, но с небольшим видоизменением: Словарь pets
pets = {
1:
{
    "Мухтар": {
    "Вид питомца": "Собака",
    "Возраст питомца": 9,
    "Имя владельца": "Павел"
}, },
2:
{
    "Каа": {
    "Вид питомца": "желторотый питон",
    "Возраст питомца": 19,
    "Имя владельца": "Саша"
}, },
# и так далее }
Здесь, 1 и 2 - это идентификаторы наших питомцев. Это уникальные ключи, по которым мы сможем обращаться к нашим записям в "базе данных"
Суть будущей программы будет заключаться в следующем:
Программа будет работать с помощью цикла while с условием command != 'stop', то есть до тех пор, пока на предложение ввести команду, пользователь не введёт слово stop
Перед взаимодействием с "базой данных" запрашивается одна из команд в качестве пользовательского ввода. Пусть это будет переменная command
Функция create должна добавлять новую информацию таким образом, чтобы идентификатор увеличивался на единицу. Чтобы у вас была возможность получать последний ключ в словаре воспользуйтесь импортом модуля collections. В начале вашей программы пропишите строчку: import collection, а в функции create в первых строках пропишите следующий код:
def create():
last = collections.deque(pets, maxlen=1)[0]
last в данном случае и будет число последнего ключа (или в нашей логике - идентификатора записи). Именно его и необходимо будет увеличивать на единицу при добавлении следующей записи.
Как вам уже известно - суть функций заключается в том, чтобы использовать один и тот же код в нескольких местах. В данной задаче вам предстоит получать информацию о питомце несколько раз. Чтобы не повторяться в коде, вам нужно создать такие функции
get_pet(ID):
def get_pet(ID):
  # функция, с помощью которой вы получите информацию о питомце в виде словаря
  # сделайте проверку, если питомца с таким ID нету в нашей "базе данных"
  # верните в этом случае False
  # а если питомец всё же есть в "базе данных" - верните информацию о нём
  # выглядеть это может примерно так:
  return pets[ID] if ID in pets.keys() else False
get_suffix(age):
def get_suffix(age):
  # функция, с помощью которой можно получить суффикс
  # 'год', 'года', 'лет'
  # реализацию этой функции вам предстоит придумать самостоятельно
  # функция будет возвращать соответствующую строку
  return
pets_list():
def pets_list():
  # Эта функция будет создана для удобства отображения всего списка питомцев
  # Информацию по каждому питомцу можно вывести с помощью цикла for
"""

import collections

# Изначальный словарь с питомцами
pets = {
    1: {"вид": "собака", "кличка": "Бобик", "возраст": 5, "владелец": "Иван"},
    2: {"вид": "кошка", "кличка": "Мурка", "возраст": 3, "владелец": "Анна"}
}


def get_pet(ID):
    """Функция для получения информации о питомце по ID"""
    return pets[ID] if ID in pets.keys() else False


def get_suffix(age):
    """Функция для получения суффикса для возраста"""
    if age % 10 == 1 and age % 100 != 11:
        return "год"
    elif 2 <= age % 10 <= 4 and not (12 <= age % 100 <= 14):
        return "года"
    else:
        return "лет"


def pets_list():
    """Функция для отображения всего списка питомцев"""
    for ID, info in pets.items():
        print(
            f"ID: {ID}, Вид: {info['вид']}, Кличка: {info['кличка']}, Возраст: {info['возраст']} {get_suffix(info['возраст'])}, Владелец: {info['владелец']}")


def create():
    """Функция для создания новой записи о питомце"""
    last = collections.deque(pets, maxlen=1)[0]
    new_id = last + 1
    вид = input("Введите вид питомца: ")
    кличка = input("Введите кличку питомца: ")
    возраст = int(input("Введите возраст питомца: "))
    владелец = input("Введите имя владельца: ")
    pets[new_id] = {"вид": вид, "кличка": кличка,
                    "возраст": возраст, "владелец": владелец}
    print(f"Питомец с ID {new_id} успешно добавлен.")


def read():
    """Функция для отображения информации о питомце"""
    ID = int(input("Введите ID питомца: "))
    pet = get_pet(ID)
    if pet:
        print(f"Это {pet['вид']} по кличке \"{pet['кличка']}\". Возраст питомца: {pet['возраст']} {get_suffix(pet['возраст'])}. Имя владельца: {pet['владелец']}")
    else:
        print("Питомец с таким ID не найден.")


def update():
    """Функция для обновления информации о питомце"""
    ID = int(input("Введите ID питомца: "))
    pet = get_pet(ID)
    if pet:
        вид = input(f"Введите новый вид питомца (текущий: {pet['вид']}): ")
        кличка = input(
            f"Введите новую кличку питомца (текущая: {pet['кличка']}): ")
        возраст = int(
            input(f"Введите новый возраст питомца (текущий: {pet['возраст']}): "))
        владелец = input(
            f"Введите новое имя владельца (текущее: {pet['владелец']}): ")
        pets[ID] = {"вид": вид, "кличка": кличка,
                    "возраст": возраст, "владелец": владелец}
        print(f"Информация о питомце с ID {ID} успешно обновлена.")
    else:
        print("Питомец с таким ID не найден.")


def delete():
    """Функция для удаления записи о питомце"""
    ID = int(input("Введите ID питомца: "))
    if ID in pets:
        del pets[ID]
        print(f"Питомец с ID {ID} успешно удален.")
    else:
        print("Питомец с таким ID не найден.")


# Основной цикл программы
command = ""
while command != "stop":
    command = input(
        "Введите команду (create - создать, read - прочитать, update - обновить, delete - удалить, list - список,stop): ").lower()
    if command == "create":
        create()
    elif command == "read":
        read()
    elif command == "update":
        update()
    elif command == "delete":
        delete()
    elif command == "list":
        pets_list()
    elif command == "stop":
        print("Программа завершена.")
    else:
        print("Неизвестная команда. Попробуйте снова.")
